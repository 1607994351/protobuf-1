// Copyright 2018 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package impl

// TODO: Move this to a separate package. We do *not* want this to be
// auto-generated by the current protoc-gen-go since it is supposed to be a
// snapshot of an generated message from the past.

import "github.com/golang/protobuf/proto"

type LP3SiblingEnum int32

func (LP3SiblingEnum) EnumDescriptor() ([]byte, []int) {
	return LP3FileDescriptor, []int{0}
}

type LP3Message_LP3ChildEnum int32

func (LP3Message_LP3ChildEnum) EnumDescriptor() ([]byte, []int) {
	return LP3FileDescriptor, []int{1, 0}
}

type LP3SiblingMessage struct {
	F1                   string   `protobuf:"bytes,1,opt,name=f1,proto3" json:"f1,omitempty"`
	F2                   []string `protobuf:"bytes,2,rep,name=f2,proto3" json:"f2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (*LP3SiblingMessage) Descriptor() ([]byte, []int) {
	return LP3FileDescriptor, []int{0}
}

type LP3Message struct {
	// Optional fields.
	OptionalBool           bool                        `protobuf:"varint,100,opt,name=optional_bool,json=optionalBool,proto3" json:"optional_bool,omitempty"`
	OptionalInt32          int32                       `protobuf:"varint,101,opt,name=optional_int32,json=optionalInt32,proto3" json:"optional_int32,omitempty"`
	OptionalSint32         int32                       `protobuf:"zigzag32,102,opt,name=optional_sint32,json=optionalSint32,proto3" json:"optional_sint32,omitempty"`
	OptionalUint32         uint32                      `protobuf:"varint,103,opt,name=optional_uint32,json=optionalUint32,proto3" json:"optional_uint32,omitempty"`
	OptionalInt64          int64                       `protobuf:"varint,104,opt,name=optional_int64,json=optionalInt64,proto3" json:"optional_int64,omitempty"`
	OptionalSint64         int64                       `protobuf:"zigzag64,105,opt,name=optional_sint64,json=optionalSint64,proto3" json:"optional_sint64,omitempty"`
	OptionalUint64         uint64                      `protobuf:"varint,106,opt,name=optional_uint64,json=optionalUint64,proto3" json:"optional_uint64,omitempty"`
	OptionalFixed32        uint32                      `protobuf:"fixed32,107,opt,name=optional_fixed32,json=optionalFixed32,proto3" json:"optional_fixed32,omitempty"`
	OptionalSfixed32       int32                       `protobuf:"fixed32,108,opt,name=optional_sfixed32,json=optionalSfixed32,proto3" json:"optional_sfixed32,omitempty"`
	OptionalFloat          float32                     `protobuf:"fixed32,109,opt,name=optional_float,json=optionalFloat,proto3" json:"optional_float,omitempty"`
	OptionalFixed64        uint64                      `protobuf:"fixed64,110,opt,name=optional_fixed64,json=optionalFixed64,proto3" json:"optional_fixed64,omitempty"`
	OptionalSfixed64       int64                       `protobuf:"fixed64,111,opt,name=optional_sfixed64,json=optionalSfixed64,proto3" json:"optional_sfixed64,omitempty"`
	OptionalDouble         float64                     `protobuf:"fixed64,112,opt,name=optional_double,json=optionalDouble,proto3" json:"optional_double,omitempty"`
	OptionalString         string                      `protobuf:"bytes,113,opt,name=optional_string,json=optionalString,proto3" json:"optional_string,omitempty"`
	OptionalBytes          []byte                      `protobuf:"bytes,114,opt,name=optional_bytes,json=optionalBytes,proto3" json:"optional_bytes,omitempty"`
	OptionalChildEnum      LP3Message_LP3ChildEnum     `protobuf:"varint,115,opt,name=optional_child_enum,json=optionalChildEnum,proto3,enum=google.golang.org.proto3.LP3Message_LP3ChildEnum" json:"optional_child_enum,omitempty"`
	OptionalSiblingEnum    LP3SiblingEnum              `protobuf:"varint,116,opt,name=optional_sibling_enum,json=optionalSiblingEnum,proto3,enum=google.golang.org.proto3.LP3SiblingEnum" json:"optional_sibling_enum,omitempty"`
	OptionalChildMessage   *LP3Message_LP3ChildMessage `protobuf:"bytes,117,opt,name=optional_child_message,json=optionalChildMessage,proto3" json:"optional_child_message,omitempty"`
	OptionalSiblingMessage *LP3SiblingMessage          `protobuf:"bytes,118,opt,name=optional_sibling_message,json=optionalSiblingMessage,proto3" json:"optional_sibling_message,omitempty"`
	// Repeated fields.
	RepeatedBool           []bool                        `protobuf:"varint,200,rep,packed,name=repeated_bool,json=repeatedBool,proto3" json:"repeated_bool,omitempty"`
	RepeatedInt32          []int32                       `protobuf:"varint,201,rep,packed,name=repeated_int32,json=repeatedInt32,proto3" json:"repeated_int32,omitempty"`
	RepeatedSint32         []int32                       `protobuf:"zigzag32,202,rep,packed,name=repeated_sint32,json=repeatedSint32,proto3" json:"repeated_sint32,omitempty"`
	RepeatedUint32         []uint32                      `protobuf:"varint,203,rep,packed,name=repeated_uint32,json=repeatedUint32,proto3" json:"repeated_uint32,omitempty"`
	RepeatedInt64          []int64                       `protobuf:"varint,204,rep,packed,name=repeated_int64,json=repeatedInt64,proto3" json:"repeated_int64,omitempty"`
	RepeatedSint64         []int64                       `protobuf:"zigzag64,205,rep,packed,name=repeated_sint64,json=repeatedSint64,proto3" json:"repeated_sint64,omitempty"`
	RepeatedUint64         []uint64                      `protobuf:"varint,206,rep,packed,name=repeated_uint64,json=repeatedUint64,proto3" json:"repeated_uint64,omitempty"`
	RepeatedFixed32        []uint32                      `protobuf:"fixed32,207,rep,packed,name=repeated_fixed32,json=repeatedFixed32,proto3" json:"repeated_fixed32,omitempty"`
	RepeatedSfixed32       []int32                       `protobuf:"fixed32,208,rep,packed,name=repeated_sfixed32,json=repeatedSfixed32,proto3" json:"repeated_sfixed32,omitempty"`
	RepeatedFloat          []float32                     `protobuf:"fixed32,209,rep,packed,name=repeated_float,json=repeatedFloat,proto3" json:"repeated_float,omitempty"`
	RepeatedFixed64        []uint64                      `protobuf:"fixed64,210,rep,packed,name=repeated_fixed64,json=repeatedFixed64,proto3" json:"repeated_fixed64,omitempty"`
	RepeatedSfixed64       []int64                       `protobuf:"fixed64,211,rep,packed,name=repeated_sfixed64,json=repeatedSfixed64,proto3" json:"repeated_sfixed64,omitempty"`
	RepeatedDouble         []float64                     `protobuf:"fixed64,212,rep,packed,name=repeated_double,json=repeatedDouble,proto3" json:"repeated_double,omitempty"`
	RepeatedString         []string                      `protobuf:"bytes,213,rep,name=repeated_string,json=repeatedString,proto3" json:"repeated_string,omitempty"`
	RepeatedBytes          [][]byte                      `protobuf:"bytes,214,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
	RepeatedChildEnum      []LP3Message_LP3ChildEnum     `protobuf:"varint,215,rep,packed,name=repeated_child_enum,json=repeatedChildEnum,proto3,enum=google.golang.org.proto3.LP3Message_LP3ChildEnum" json:"repeated_child_enum,omitempty"`
	RepeatedSiblingEnum    []LP3SiblingEnum              `protobuf:"varint,216,rep,packed,name=repeated_sibling_enum,json=repeatedSiblingEnum,proto3,enum=google.golang.org.proto3.LP3SiblingEnum" json:"repeated_sibling_enum,omitempty"`
	RepeatedChildMessage   []*LP3Message_LP3ChildMessage `protobuf:"bytes,217,rep,name=repeated_child_message,json=repeatedChildMessage,proto3" json:"repeated_child_message,omitempty"`
	RepeatedSiblingMessage []*LP3SiblingMessage          `protobuf:"bytes,218,rep,name=repeated_sibling_message,json=repeatedSiblingMessage,proto3" json:"repeated_sibling_message,omitempty"`
	// Repeated packed fields.
	RepeatedPackedBool     []bool    `protobuf:"varint,300,rep,packed,name=repeated_packed_bool,json=repeatedPackedBool,proto3" json:"repeated_packed_bool,omitempty"`
	RepeatedPackedInt32    []int32   `protobuf:"varint,301,rep,packed,name=repeated_packed_int32,json=repeatedPackedInt32,proto3" json:"repeated_packed_int32,omitempty"`
	RepeatedPackedSint32   []int32   `protobuf:"zigzag32,302,rep,packed,name=repeated_packed_sint32,json=repeatedPackedSint32,proto3" json:"repeated_packed_sint32,omitempty"`
	RepeatedPackedUint32   []uint32  `protobuf:"varint,303,rep,packed,name=repeated_packed_uint32,json=repeatedPackedUint32,proto3" json:"repeated_packed_uint32,omitempty"`
	RepeatedPackedInt64    []int64   `protobuf:"varint,304,rep,packed,name=repeated_packed_int64,json=repeatedPackedInt64,proto3" json:"repeated_packed_int64,omitempty"`
	RepeatedPackedSint64   []int64   `protobuf:"zigzag64,305,rep,packed,name=repeated_packed_sint64,json=repeatedPackedSint64,proto3" json:"repeated_packed_sint64,omitempty"`
	RepeatedPackedUint64   []uint64  `protobuf:"varint,306,rep,packed,name=repeated_packed_uint64,json=repeatedPackedUint64,proto3" json:"repeated_packed_uint64,omitempty"`
	RepeatedPackedFixed32  []uint32  `protobuf:"fixed32,307,rep,packed,name=repeated_packed_fixed32,json=repeatedPackedFixed32,proto3" json:"repeated_packed_fixed32,omitempty"`
	RepeatedPackedSfixed32 []int32   `protobuf:"fixed32,308,rep,packed,name=repeated_packed_sfixed32,json=repeatedPackedSfixed32,proto3" json:"repeated_packed_sfixed32,omitempty"`
	RepeatedPackedFloat    []float32 `protobuf:"fixed32,309,rep,packed,name=repeated_packed_float,json=repeatedPackedFloat,proto3" json:"repeated_packed_float,omitempty"`
	RepeatedPackedFixed64  []uint64  `protobuf:"fixed64,310,rep,packed,name=repeated_packed_fixed64,json=repeatedPackedFixed64,proto3" json:"repeated_packed_fixed64,omitempty"`
	RepeatedPackedSfixed64 []int64   `protobuf:"fixed64,311,rep,packed,name=repeated_packed_sfixed64,json=repeatedPackedSfixed64,proto3" json:"repeated_packed_sfixed64,omitempty"`
	RepeatedPackedDouble   []float64 `protobuf:"fixed64,312,rep,packed,name=repeated_packed_double,json=repeatedPackedDouble,proto3" json:"repeated_packed_double,omitempty"`
	// Repeated non-packed fields.
	RepeatedNonpackedBool     []bool    `protobuf:"varint,400,rep,name=repeated_nonpacked_bool,json=repeatedNonpackedBool,proto3" json:"repeated_nonpacked_bool,omitempty"`
	RepeatedNonpackedInt32    []int32   `protobuf:"varint,401,rep,name=repeated_nonpacked_int32,json=repeatedNonpackedInt32,proto3" json:"repeated_nonpacked_int32,omitempty"`
	RepeatedNonpackedSint32   []int32   `protobuf:"zigzag32,402,rep,name=repeated_nonpacked_sint32,json=repeatedNonpackedSint32,proto3" json:"repeated_nonpacked_sint32,omitempty"`
	RepeatedNonpackedUint32   []uint32  `protobuf:"varint,403,rep,name=repeated_nonpacked_uint32,json=repeatedNonpackedUint32,proto3" json:"repeated_nonpacked_uint32,omitempty"`
	RepeatedNonpackedInt64    []int64   `protobuf:"varint,404,rep,name=repeated_nonpacked_int64,json=repeatedNonpackedInt64,proto3" json:"repeated_nonpacked_int64,omitempty"`
	RepeatedNonpackedSint64   []int64   `protobuf:"zigzag64,405,rep,name=repeated_nonpacked_sint64,json=repeatedNonpackedSint64,proto3" json:"repeated_nonpacked_sint64,omitempty"`
	RepeatedNonpackedUint64   []uint64  `protobuf:"varint,406,rep,name=repeated_nonpacked_uint64,json=repeatedNonpackedUint64,proto3" json:"repeated_nonpacked_uint64,omitempty"`
	RepeatedNonpackedFixed32  []uint32  `protobuf:"fixed32,407,rep,name=repeated_nonpacked_fixed32,json=repeatedNonpackedFixed32,proto3" json:"repeated_nonpacked_fixed32,omitempty"`
	RepeatedNonpackedSfixed32 []int32   `protobuf:"fixed32,408,rep,name=repeated_nonpacked_sfixed32,json=repeatedNonpackedSfixed32,proto3" json:"repeated_nonpacked_sfixed32,omitempty"`
	RepeatedNonpackedFloat    []float32 `protobuf:"fixed32,409,rep,name=repeated_nonpacked_float,json=repeatedNonpackedFloat,proto3" json:"repeated_nonpacked_float,omitempty"`
	RepeatedNonpackedFixed64  []uint64  `protobuf:"fixed64,410,rep,name=repeated_nonpacked_fixed64,json=repeatedNonpackedFixed64,proto3" json:"repeated_nonpacked_fixed64,omitempty"`
	RepeatedNonpackedSfixed64 []int64   `protobuf:"fixed64,411,rep,name=repeated_nonpacked_sfixed64,json=repeatedNonpackedSfixed64,proto3" json:"repeated_nonpacked_sfixed64,omitempty"`
	RepeatedNonpackedDouble   []float64 `protobuf:"fixed64,412,rep,name=repeated_nonpacked_double,json=repeatedNonpackedDouble,proto3" json:"repeated_nonpacked_double,omitempty"`
	// Map fields.
	MapBoolBool           map[bool]bool                        `protobuf:"bytes,500,rep,name=map_bool_bool,json=mapBoolBool,proto3" json:"map_bool_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapBoolInt32          map[bool]int32                       `protobuf:"bytes,501,rep,name=map_bool_int32,json=mapBoolInt32,proto3" json:"map_bool_int32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapBoolSint32         map[bool]int32                       `protobuf:"bytes,502,rep,name=map_bool_sint32,json=mapBoolSint32,proto3" json:"map_bool_sint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	MapBoolUint32         map[bool]uint32                      `protobuf:"bytes,503,rep,name=map_bool_uint32,json=mapBoolUint32,proto3" json:"map_bool_uint32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapBoolInt64          map[bool]int64                       `protobuf:"bytes,504,rep,name=map_bool_int64,json=mapBoolInt64,proto3" json:"map_bool_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapBoolSint64         map[bool]int64                       `protobuf:"bytes,505,rep,name=map_bool_sint64,json=mapBoolSint64,proto3" json:"map_bool_sint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	MapBoolUint64         map[bool]uint64                      `protobuf:"bytes,506,rep,name=map_bool_uint64,json=mapBoolUint64,proto3" json:"map_bool_uint64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapBoolFixed32        map[bool]uint32                      `protobuf:"bytes,507,rep,name=map_bool_fixed32,json=mapBoolFixed32,proto3" json:"map_bool_fixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapBoolSfixed32       map[bool]int32                       `protobuf:"bytes,508,rep,name=map_bool_sfixed32,json=mapBoolSfixed32,proto3" json:"map_bool_sfixed32,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapBoolFloat          map[bool]float32                     `protobuf:"bytes,509,rep,name=map_bool_float,json=mapBoolFloat,proto3" json:"map_bool_float,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	MapBoolFixed64        map[bool]uint64                      `protobuf:"bytes,510,rep,name=map_bool_fixed64,json=mapBoolFixed64,proto3" json:"map_bool_fixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapBoolSfixed64       map[bool]int64                       `protobuf:"bytes,511,rep,name=map_bool_sfixed64,json=mapBoolSfixed64,proto3" json:"map_bool_sfixed64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapBoolDouble         map[bool]float64                     `protobuf:"bytes,512,rep,name=map_bool_double,json=mapBoolDouble,proto3" json:"map_bool_double,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	MapBoolString         map[bool]string                      `protobuf:"bytes,513,rep,name=map_bool_string,json=mapBoolString,proto3" json:"map_bool_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolBytes          map[bool][]byte                      `protobuf:"bytes,514,rep,name=map_bool_bytes,json=mapBoolBytes,proto3" json:"map_bool_bytes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolChildEnum      map[bool]LP3Message_LP3ChildEnum     `protobuf:"bytes,515,rep,name=map_bool_child_enum,json=mapBoolChildEnum,proto3" json:"map_bool_child_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=google.golang.org.proto3.LP3Message_LP3ChildEnum"`
	MapBoolSiblingEnum    map[bool]LP3SiblingEnum              `protobuf:"bytes,516,rep,name=map_bool_sibling_enum,json=mapBoolSiblingEnum,proto3" json:"map_bool_sibling_enum,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=google.golang.org.proto3.LP3SiblingEnum"`
	MapBoolChildMessage   map[bool]*LP3Message_LP3ChildMessage `protobuf:"bytes,517,rep,name=map_bool_child_message,json=mapBoolChildMessage,proto3" json:"map_bool_child_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapBoolSiblingMessage map[bool]*LP3SiblingMessage          `protobuf:"bytes,518,rep,name=map_bool_sibling_message,json=mapBoolSiblingMessage,proto3" json:"map_bool_sibling_message,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapInt32Bool          map[int32]bool                       `protobuf:"bytes,519,rep,name=map_int32_bool,json=mapInt32Bool,proto3" json:"map_int32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint32Bool         map[int32]bool                       `protobuf:"bytes,520,rep,name=map_sint32_bool,json=mapSint32Bool,proto3" json:"map_sint32_bool,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint32Bool         map[uint32]bool                      `protobuf:"bytes,521,rep,name=map_uint32_bool,json=mapUint32Bool,proto3" json:"map_uint32_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapInt64Bool          map[int64]bool                       `protobuf:"bytes,522,rep,name=map_int64_bool,json=mapInt64Bool,proto3" json:"map_int64_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapSint64Bool         map[int64]bool                       `protobuf:"bytes,523,rep,name=map_sint64_bool,json=mapSint64Bool,proto3" json:"map_sint64_bool,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapUint64Bool         map[uint64]bool                      `protobuf:"bytes,524,rep,name=map_uint64_bool,json=mapUint64Bool,proto3" json:"map_uint64_bool,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapFixed32Bool        map[uint32]bool                      `protobuf:"bytes,525,rep,name=map_fixed32_bool,json=mapFixed32Bool,proto3" json:"map_fixed32_bool,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapStringBool         map[string]bool                      `protobuf:"bytes,526,rep,name=map_string_bool,json=mapStringBool,proto3" json:"map_string_bool,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Oneof fields.
	OneofUnion           isLP3Message_OneofUnion `protobuf_oneof:"oneof_union"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (*LP3Message) Descriptor() ([]byte, []int) {
	return LP3FileDescriptor, []int{1}
}

type isLP3Message_OneofUnion interface {
	isLP3Message_OneofUnion()
}

type LP3Message_OneofBool struct {
	OneofBool bool `protobuf:"varint,600,opt,name=oneof_bool,json=oneofBool,proto3,oneof"`
}
type LP3Message_OneofInt32 struct {
	OneofInt32 int32 `protobuf:"varint,601,opt,name=oneof_int32,json=oneofInt32,proto3,oneof"`
}
type LP3Message_OneofSint32 struct {
	OneofSint32 int32 `protobuf:"zigzag32,602,opt,name=oneof_sint32,json=oneofSint32,proto3,oneof"`
}
type LP3Message_OneofUint32 struct {
	OneofUint32 uint32 `protobuf:"varint,603,opt,name=oneof_uint32,json=oneofUint32,proto3,oneof"`
}
type LP3Message_OneofInt64 struct {
	OneofInt64 int64 `protobuf:"varint,604,opt,name=oneof_int64,json=oneofInt64,proto3,oneof"`
}
type LP3Message_OneofSint64 struct {
	OneofSint64 int64 `protobuf:"zigzag64,605,opt,name=oneof_sint64,json=oneofSint64,proto3,oneof"`
}
type LP3Message_OneofUint64 struct {
	OneofUint64 uint64 `protobuf:"varint,606,opt,name=oneof_uint64,json=oneofUint64,proto3,oneof"`
}
type LP3Message_OneofFixed32 struct {
	OneofFixed32 uint32 `protobuf:"fixed32,607,opt,name=oneof_fixed32,json=oneofFixed32,proto3,oneof"`
}
type LP3Message_OneofSfixed32 struct {
	OneofSfixed32 int32 `protobuf:"fixed32,608,opt,name=oneof_sfixed32,json=oneofSfixed32,proto3,oneof"`
}
type LP3Message_OneofFloat struct {
	OneofFloat float32 `protobuf:"fixed32,609,opt,name=oneof_float,json=oneofFloat,proto3,oneof"`
}
type LP3Message_OneofFixed64 struct {
	OneofFixed64 uint64 `protobuf:"fixed64,610,opt,name=oneof_fixed64,json=oneofFixed64,proto3,oneof"`
}
type LP3Message_OneofSfixed64 struct {
	OneofSfixed64 int64 `protobuf:"fixed64,611,opt,name=oneof_sfixed64,json=oneofSfixed64,proto3,oneof"`
}
type LP3Message_OneofDouble struct {
	OneofDouble float64 `protobuf:"fixed64,612,opt,name=oneof_double,json=oneofDouble,proto3,oneof"`
}
type LP3Message_OneofString struct {
	OneofString string `protobuf:"bytes,613,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}
type LP3Message_OneofBytes struct {
	OneofBytes []byte `protobuf:"bytes,614,opt,name=oneof_bytes,json=oneofBytes,proto3,oneof"`
}
type LP3Message_OneofChildEnum struct {
	OneofChildEnum LP3Message_LP3ChildEnum `protobuf:"varint,615,opt,name=oneof_child_enum,json=oneofChildEnum,proto3,enum=google.golang.org.proto3.LP3Message_LP3ChildEnum,oneof"`
}
type LP3Message_OneofSiblingEnum struct {
	OneofSiblingEnum LP3SiblingEnum `protobuf:"varint,616,opt,name=oneof_sibling_enum,json=oneofSiblingEnum,proto3,enum=google.golang.org.proto3.LP3SiblingEnum,oneof"`
}
type LP3Message_OneofChildMessage struct {
	OneofChildMessage *LP3Message_LP3ChildMessage `protobuf:"bytes,617,opt,name=oneof_child_message,json=oneofChildMessage,proto3,oneof"`
}
type LP3Message_OneofSiblingMessage struct {
	OneofSiblingMessage *LP3SiblingMessage `protobuf:"bytes,618,opt,name=oneof_sibling_message,json=oneofSiblingMessage,proto3,oneof"`
}
type LP3Message_OneofString1 struct {
	OneofString1 string `protobuf:"bytes,619,opt,name=oneof_string1,json=oneofString1,proto3,oneof"`
}
type LP3Message_OneofString2 struct {
	OneofString2 string `protobuf:"bytes,620,opt,name=oneof_string2,json=oneofString2,proto3,oneof"`
}
type LP3Message_OneofString3 struct {
	OneofString3 string `protobuf:"bytes,621,opt,name=oneof_string3,json=oneofString3,proto3,oneof"`
}

func (*LP3Message_OneofBool) isLP3Message_OneofUnion()           {}
func (*LP3Message_OneofInt32) isLP3Message_OneofUnion()          {}
func (*LP3Message_OneofSint32) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofUint32) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofInt64) isLP3Message_OneofUnion()          {}
func (*LP3Message_OneofSint64) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofUint64) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofFixed32) isLP3Message_OneofUnion()        {}
func (*LP3Message_OneofSfixed32) isLP3Message_OneofUnion()       {}
func (*LP3Message_OneofFloat) isLP3Message_OneofUnion()          {}
func (*LP3Message_OneofFixed64) isLP3Message_OneofUnion()        {}
func (*LP3Message_OneofSfixed64) isLP3Message_OneofUnion()       {}
func (*LP3Message_OneofDouble) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofString) isLP3Message_OneofUnion()         {}
func (*LP3Message_OneofBytes) isLP3Message_OneofUnion()          {}
func (*LP3Message_OneofChildEnum) isLP3Message_OneofUnion()      {}
func (*LP3Message_OneofSiblingEnum) isLP3Message_OneofUnion()    {}
func (*LP3Message_OneofChildMessage) isLP3Message_OneofUnion()   {}
func (*LP3Message_OneofSiblingMessage) isLP3Message_OneofUnion() {}
func (*LP3Message_OneofString1) isLP3Message_OneofUnion()        {}
func (*LP3Message_OneofString2) isLP3Message_OneofUnion()        {}
func (*LP3Message_OneofString3) isLP3Message_OneofUnion()        {}

func (*LP3Message) XXX_OneofFuncs() (func(proto.Message, *proto.Buffer) error, func(proto.Message, int, int, *proto.Buffer) (bool, error), func(proto.Message) int, []interface{}) {
	return nil, nil, nil, []interface{}{
		(*LP3Message_OneofBool)(nil),
		(*LP3Message_OneofInt32)(nil),
		(*LP3Message_OneofSint32)(nil),
		(*LP3Message_OneofUint32)(nil),
		(*LP3Message_OneofInt64)(nil),
		(*LP3Message_OneofSint64)(nil),
		(*LP3Message_OneofUint64)(nil),
		(*LP3Message_OneofFixed32)(nil),
		(*LP3Message_OneofSfixed32)(nil),
		(*LP3Message_OneofFloat)(nil),
		(*LP3Message_OneofFixed64)(nil),
		(*LP3Message_OneofSfixed64)(nil),
		(*LP3Message_OneofDouble)(nil),
		(*LP3Message_OneofString)(nil),
		(*LP3Message_OneofBytes)(nil),
		(*LP3Message_OneofChildEnum)(nil),
		(*LP3Message_OneofSiblingEnum)(nil),
		(*LP3Message_OneofChildMessage)(nil),
		(*LP3Message_OneofSiblingMessage)(nil),
		(*LP3Message_OneofString1)(nil),
		(*LP3Message_OneofString2)(nil),
		(*LP3Message_OneofString3)(nil),
	}
}

type LP3Message_LP3ChildMessage struct {
	F1                   string   `protobuf:"bytes,1,opt,name=f1,proto3" json:"f1,omitempty"`
	F2                   []string `protobuf:"bytes,2,rep,name=f2,proto3" json:"f2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (*LP3Message_LP3ChildMessage) Descriptor() ([]byte, []int) {
	return LP3FileDescriptor, []int{1, 0}
}

var LP3FileDescriptor = []byte{
	// 2271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x59, 0xe7, 0x73, 0x1b, 0xc7,
	0x15, 0xc7, 0xe1, 0xc0, 0xb6, 0x06, 0x08, 0xe0, 0x20, 0x52, 0x6b, 0xe6, 0xcb, 0x8d, 0xe2, 0x38,
	0x17, 0xd9, 0xc3, 0x19, 0x12, 0xeb, 0x75, 0x49, 0x6c, 0x45, 0x74, 0xe4, 0x20, 0x1e, 0xdb, 0xd2,
	0x9c, 0xc2, 0xc9, 0xc4, 0x13, 0x47, 0x01, 0x45, 0x00, 0x86, 0x04, 0xe0, 0x18, 0x12, 0xd0, 0x44,
	0x33, 0xf9, 0x90, 0xde, 0x93, 0x49, 0xef, 0x7f, 0x42, 0x7a, 0xff, 0x13, 0xd2, 0x7b, 0xb1, 0x9d,
	0xde, 0xfb, 0x87, 0xcc, 0xa4, 0xf7, 0xd9, 0x7b, 0x5b, 0xef, 0xf6, 0x08, 0x1c, 0x3e, 0x68, 0x04,
	0x3c, 0xfc, 0xde, 0xfb, 0xed, 0x7b, 0xb7, 0xbf, 0xb7, 0xfb, 0x78, 0xa8, 0x3e, 0xee, 0x1c, 0x8d,
	0x2f, 0x1d, 0x1c, 0x46, 0xe3, 0xa8, 0xb9, 0x19, 0xff, 0xe7, 0xe1, 0x5e, 0x14, 0xf5, 0x06, 0x9d,
	0xcd, 0x5e, 0x34, 0x68, 0x8f, 0x7a, 0x9b, 0xd1, 0x61, 0x0f, 0x7e, 0x68, 0x9e, 0x6a, 0xa2, 0xfa,
	0x03, 0x17, 0x9a, 0x17, 0xfb, 0x7b, 0x83, 0xfe, 0xa8, 0xf7, 0x60, 0xe7, 0xe8, 0xa8, 0xdd, 0xeb,
	0x78, 0xab, 0xa8, 0xd8, 0xdd, 0xc2, 0x8e, 0xef, 0x04, 0x2b, 0x61, 0xb1, 0xbb, 0x15, 0x7f, 0xdf,
	0xc6, 0x45, 0xdf, 0x8d, 0xbf, 0x6f, 0x9f, 0xfa, 0xd3, 0xfd, 0x08, 0x3d, 0x70, 0xa1, 0x29, 0xe0,
	0x4f, 0x46, 0x95, 0xe8, 0x60, 0xdc, 0x8f, 0x46, 0xed, 0xc1, 0xa5, 0xbd, 0x28, 0x1a, 0xe0, 0x7d,
	0xdf, 0x09, 0x96, 0xc3, 0xb2, 0x30, 0xee, 0x44, 0xd1, 0xc0, 0x7b, 0x0a, 0x5a, 0x95, 0xa0, 0xfe,
	0x68, 0xdc, 0xdc, 0xc6, 0x1d, 0xdf, 0x09, 0x16, 0x42, 0xe9, 0xfa, 0x1c, 0x66, 0xf4, 0x9e, 0x8a,
	0xaa, 0x12, 0x76, 0x04, 0xb8, 0xae, 0xef, 0x04, 0xf5, 0x50, 0x7a, 0x5f, 0xec, 0xa7, 0x80, 0x13,
	0x00, 0xf6, 0x7c, 0x27, 0xa8, 0x28, 0xe0, 0x2e, 0x00, 0x13, 0xc4, 0x94, 0xe0, 0x47, 0x7d, 0x27,
	0x70, 0x0d, 0x62, 0x4a, 0x52, 0xc4, 0x94, 0xe0, 0xbe, 0xef, 0x04, 0x9e, 0x49, 0x9c, 0x00, 0x4e,
	0x00, 0x78, 0xc5, 0x77, 0x82, 0x92, 0x49, 0x4c, 0x89, 0xf7, 0x34, 0x54, 0x93, 0xc0, 0x6e, 0xff,
	0x25, 0x9d, 0xfd, 0xe6, 0x36, 0xbe, 0xea, 0x3b, 0xc1, 0x52, 0x28, 0x03, 0xdc, 0x07, 0x66, 0xef,
	0x16, 0x54, 0x57, 0xe4, 0x02, 0x3b, 0xf0, 0x9d, 0xa0, 0x1a, 0xca, 0x18, 0x17, 0xb9, 0xdd, 0x48,
	0xa8, 0x3b, 0x88, 0xda, 0x63, 0x3c, 0xf4, 0x9d, 0xa0, 0xa8, 0x12, 0xba, 0x8f, 0x19, 0xd3, 0xf4,
	0x94, 0xe0, 0x91, 0xef, 0x04, 0x8b, 0x09, 0x7a, 0x4a, 0x2c, 0xf4, 0x94, 0xe0, 0xc8, 0x77, 0x82,
	0x5a, 0x92, 0x3e, 0x91, 0xff, 0x7e, 0x34, 0xd9, 0x1b, 0x74, 0xf0, 0x81, 0xef, 0x04, 0x8e, 0xca,
	0xff, 0x59, 0xb1, 0xd5, 0xac, 0xe8, 0xf8, 0xb0, 0x3f, 0xea, 0xe1, 0x17, 0xc7, 0x5b, 0x4a, 0x55,
	0x34, 0xb6, 0x1a, 0x09, 0xed, 0x5d, 0x1f, 0x77, 0x8e, 0xf0, 0xa1, 0xef, 0x04, 0x65, 0x95, 0xd0,
	0x0e, 0x33, 0x7a, 0x6d, 0xd4, 0x90, 0xb0, 0xcb, 0x8f, 0xf6, 0x07, 0xfb, 0x97, 0x3a, 0xa3, 0xc9,
	0x10, 0x1f, 0xf9, 0x4e, 0xb0, 0xba, 0xbd, 0xb5, 0x99, 0xb5, 0xc5, 0x37, 0xd5, 0x4e, 0x65, 0x1f,
	0xef, 0x65, 0x9e, 0xe7, 0x46, 0x93, 0x61, 0x28, 0x73, 0x96, 0x26, 0xef, 0x05, 0x68, 0x4d, 0xdb,
	0x04, 0xb1, 0x26, 0x80, 0x64, 0x1c, 0x93, 0x04, 0xc7, 0x92, 0x70, 0x11, 0xc5, 0xb1, 0x1b, 0x6a,
	0xd3, 0x48, 0xa3, 0x77, 0x05, 0xad, 0x27, 0x12, 0x18, 0xc2, 0xba, 0xf0, 0xc4, 0x77, 0x82, 0x1b,
	0xb6, 0x49, 0xae, 0x1c, 0xf8, 0xf7, 0xf0, 0x84, 0x91, 0x86, 0xd0, 0x64, 0x07, 0xe1, 0x54, 0x26,
	0x82, 0xed, 0x5a, 0xcc, 0x76, 0xcb, 0x2c, 0xc9, 0x08, 0x92, 0xf5, 0x44, 0x3e, 0x82, 0xe6, 0x26,
	0x54, 0x39, 0xec, 0x1c, 0x74, 0xda, 0xe3, 0xce, 0x3e, 0x48, 0xff, 0xf3, 0x8e, 0xef, 0x32, 0xed,
	0x0b, 0x6b, 0xac, 0xfd, 0x9b, 0xd1, 0xaa, 0x44, 0x81, 0x54, 0xbf, 0xc0, 0x60, 0x0b, 0xa1, 0x74,
	0x06, 0xf1, 0x07, 0xa8, 0x2a, 0x71, 0x5c, 0xfc, 0x5f, 0x64, 0xc0, 0x7a, 0x28, 0xfd, 0xb9, 0xfa,
	0x75, 0x24, 0x57, 0xff, 0x97, 0x18, 0xb2, 0xa2, 0x90, 0x5c, 0xfe, 0x09, 0x6e, 0x4a, 0xf0, 0x97,
	0x19, 0xd0, 0x35, 0xb8, 0x29, 0x49, 0x71, 0x53, 0x82, 0xbf, 0xc2, 0x80, 0x9e, 0xc9, 0x9d, 0x40,
	0xf2, 0x06, 0xf0, 0x55, 0x86, 0x2c, 0x99, 0xdc, 0x94, 0x78, 0xa7, 0x51, 0x4d, 0x22, 0x85, 0xaa,
	0xbf, 0xc6, 0xa0, 0x4b, 0xa1, 0x0c, 0x21, 0x5a, 0xc0, 0xad, 0xa8, 0xae, 0xf8, 0x05, 0xf8, 0xeb,
	0x0c, 0x5c, 0x0d, 0x65, 0x14, 0xd9, 0x03, 0xf4, 0xac, 0xa0, 0x07, 0x7c, 0x83, 0x41, 0x8b, 0x2a,
	0x2b, 0x68, 0x02, 0xa9, 0x15, 0x50, 0x82, 0xbf, 0xc9, 0x90, 0x8b, 0x89, 0x15, 0x50, 0x62, 0x59,
	0x01, 0x25, 0xf8, 0x5b, 0x0c, 0x5c, 0x4b, 0xae, 0x20, 0x51, 0x05, 0xde, 0x06, 0xbe, 0xcd, 0xb0,
	0x8e, 0xaa, 0x02, 0xef, 0x03, 0x46, 0x65, 0xa1, 0x0f, 0x7c, 0xc7, 0x89, 0xcf, 0x12, 0x55, 0x59,
	0x68, 0x04, 0x7a, 0x56, 0xd0, 0x08, 0xbe, 0xcb, 0x80, 0x65, 0x95, 0x15, 0x74, 0x82, 0x3d, 0xd4,
	0x90, 0x38, 0xad, 0x13, 0x7c, 0x8f, 0x81, 0xe7, 0x6b, 0x05, 0x22, 0x9c, 0x6a, 0x05, 0x8f, 0xa0,
	0x35, 0x6d, 0x3f, 0x68, 0xad, 0xe0, 0x31, 0x60, 0xc9, 0xd1, 0x0b, 0xd4, 0xfe, 0x51, 0xbd, 0xe0,
	0x2a, 0x5a, 0x4f, 0xa4, 0x20, 0xd4, 0xf9, 0x38, 0x8b, 0x3f, 0x77, 0x33, 0x30, 0x12, 0x11, 0x2a,
	0xed, 0x22, 0x9c, 0xca, 0x45, 0xd0, 0x3d, 0x01, 0x74, 0xf9, 0xba, 0x41, 0x22, 0x23, 0xc1, 0x73,
	0x1b, 0x92, 0xfc, 0x97, 0x0e, 0xda, 0x97, 0xaf, 0x8a, 0xa6, 0xf0, 0x21, 0x76, 0x75, 0x58, 0xde,
	0x29, 0xd6, 0x9c, 0xd0, 0x13, 0x80, 0x0b, 0xf1, 0xef, 0x71, 0x7b, 0xb8, 0x5d, 0x2b, 0x35, 0x77,
	0x03, 0x49, 0x7f, 0x98, 0xf9, 0x2d, 0xc4, 0x7e, 0x0d, 0xd3, 0x0f, 0xfa, 0xc5, 0x9d, 0x5a, 0x11,
	0xb9, 0x23, 0x6f, 0x1b, 0x1f, 0x61, 0x9e, 0xf5, 0xd8, 0xf3, 0x84, 0xe9, 0xc9, 0x1b, 0x88, 0xc5,
	0x95, 0xf7, 0x91, 0x8f, 0x32, 0xd7, 0x8a, 0xcd, 0x95, 0x77, 0x14, 0xfb, 0x72, 0x29, 0xc1, 0x1f,
	0x63, 0x9e, 0x6e, 0xc6, 0x72, 0x29, 0xc9, 0x5a, 0x2e, 0x25, 0xf8, 0xe3, 0xcc, 0xd3, 0xcb, 0x5a,
	0xae, 0xdd, 0x95, 0xb7, 0x9e, 0x4f, 0x30, 0xd7, 0x52, 0xd6, 0x72, 0x29, 0xf1, 0x9e, 0x8e, 0x4e,
	0x26, 0x5d, 0x45, 0x7b, 0xf9, 0x24, 0xf3, 0x5d, 0x8a, 0x7d, 0xd7, 0x4c, 0x5f, 0xd1, 0x95, 0xee,
	0xd6, 0x76, 0x8e, 0x58, 0xb2, 0xf0, 0xfe, 0x14, 0xf3, 0xae, 0xc6, 0xde, 0xeb, 0x89, 0x45, 0x8b,
	0x36, 0x65, 0x29, 0x15, 0x74, 0xab, 0x4f, 0x33, 0xdf, 0xa2, 0xad, 0x54, 0xd0, 0xb7, 0xb2, 0x16,
	0x4d, 0x09, 0xfe, 0x0c, 0x73, 0x5d, 0xcc, 0x5c, 0x34, 0x25, 0xd9, 0x8b, 0xa6, 0x04, 0x7f, 0x96,
	0x79, 0xd7, 0xb2, 0x17, 0x6d, 0xaf, 0x35, 0x6f, 0x70, 0x9f, 0x63, 0xce, 0x8e, 0xad, 0xd6, 0xbc,
	0xd5, 0xe9, 0xcb, 0x1e, 0x45, 0x23, 0x5d, 0x03, 0x6f, 0x75, 0xb9, 0x06, 0x0a, 0x6a, 0xd9, 0x0f,
	0x09, 0x48, 0x2c, 0x03, 0x7d, 0xd9, 0xca, 0x19, 0x36, 0xe5, 0xdb, 0x5c, 0xae, 0x84, 0x82, 0x5a,
	0xb6, 0xf4, 0x06, 0x31, 0x9c, 0x41, 0x37, 0x5a, 0xdc, 0xb9, 0x1e, 0xde, 0xee, 0x72, 0x3d, 0x14,
	0xc2, 0x93, 0x29, 0x7f, 0x2e, 0x09, 0x7b, 0x00, 0xae, 0x8a, 0x77, 0xb8, 0x5c, 0x15, 0xb6, 0x00,
	0x5c, 0x18, 0x99, 0x09, 0x50, 0x82, 0xdf, 0xe9, 0x72, 0x6d, 0x64, 0x24, 0x40, 0xc9, 0x31, 0x09,
	0x50, 0x82, 0xdf, 0xe5, 0x72, 0x85, 0x64, 0x25, 0x90, 0x19, 0x80, 0xeb, 0xe4, 0xdd, 0x2e, 0xd7,
	0x49, 0x56, 0x02, 0x94, 0x78, 0x67, 0xd1, 0x86, 0x25, 0x80, 0xd8, 0xef, 0xef, 0x71, 0xb9, 0x5a,
	0x0a, 0x21, 0x4e, 0x45, 0x10, 0x82, 0xb9, 0x17, 0x3d, 0xc9, 0x96, 0x84, 0x88, 0xf1, 0x5e, 0x97,
	0x6b, 0xa6, 0x10, 0xde, 0x98, 0x4e, 0xa3, 0x6b, 0x51, 0x9d, 0xb6, 0x8e, 0x58, 0x39, 0xef, 0x73,
	0xb9, 0x72, 0x6c, 0x85, 0x04, 0xf1, 0x1c, 0x93, 0x06, 0x25, 0xf8, 0xfd, 0x2e, 0xd7, 0x4f, 0x66,
	0x1a, 0x94, 0x1c, 0x9b, 0x06, 0x25, 0xf8, 0x03, 0x2e, 0x57, 0x51, 0x76, 0x1a, 0x99, 0xcf, 0x83,
	0x6b, 0xe9, 0x83, 0x2e, 0xd7, 0x92, 0xed, 0x79, 0x70, 0x39, 0x3d, 0x8c, 0x2a, 0xc3, 0xf6, 0x41,
	0xac, 0x1f, 0x10, 0xd1, 0x9f, 0xdd, 0xf8, 0xb0, 0xba, 0x6d, 0xa6, 0xb3, 0xf1, 0xc1, 0xf6, 0x01,
	0xd3, 0x15, 0xfb, 0x77, 0x6e, 0x34, 0x3e, 0xbc, 0x1e, 0xde, 0x30, 0x54, 0x16, 0xef, 0x11, 0xb4,
	0x2a, 0x63, 0xc3, 0x16, 0xff, 0x0b, 0x04, 0xa7, 0x79, 0x82, 0xc7, 0xd2, 0x83, 0xe8, 0xe5, 0xa1,
	0x66, 0xf2, 0x5e, 0x84, 0xaa, 0x32, 0x3c, 0xd7, 0xe0, 0x5f, 0x21, 0xfe, 0xed, 0x79, 0xe2, 0x83,
	0x34, 0x81, 0xa0, 0x32, 0xd4, 0x6d, 0x06, 0x03, 0x17, 0xe9, 0xdf, 0xe6, 0x60, 0xd8, 0xb5, 0x30,
	0x70, 0x3d, 0x27, 0x4a, 0x44, 0x09, 0xfe, 0xfb, 0x7c, 0x25, 0xa2, 0x24, 0x55, 0x22, 0x4a, 0x52,
	0x25, 0xa2, 0x04, 0xff, 0x63, 0xce, 0x12, 0x09, 0x02, 0xbd, 0x44, 0x09, 0x06, 0xde, 0x06, 0xfe,
	0x39, 0x67, 0x89, 0x92, 0x0c, 0xbc, 0x63, 0x5c, 0x46, 0x35, 0xc9, 0x20, 0x34, 0xfe, 0x2f, 0xa0,
	0xb8, 0x23, 0x0f, 0x05, 0x6f, 0x1f, 0xc0, 0xb1, 0x3a, 0x34, 0x8c, 0x5e, 0x17, 0xd5, 0x55, 0xa1,
	0x04, 0xcb, 0xbf, 0x81, 0xe5, 0xce, 0x5c, 0xa5, 0xea, 0xea, 0x34, 0xd5, 0xa1, 0x69, 0x35, 0x9e,
	0x37, 0x34, 0x9b, 0xff, 0xcc, 0xf1, 0xbc, 0xe3, 0x1e, 0x64, 0x3e, 0x6f, 0x68, 0x4b, 0xa9, 0x5a,
	0x51, 0x82, 0xff, 0x3b, 0x6f, 0xad, 0xc4, 0xf3, 0x30, 0x6a, 0x45, 0x89, 0xa5, 0x56, 0x94, 0xe0,
	0xff, 0xcd, 0x5d, 0x2b, 0x41, 0x63, 0xd6, 0x2a, 0xb1, 0xb5, 0x78, 0x47, 0x7b, 0x59, 0x29, 0xff,
	0xd6, 0x82, 0x46, 0x67, 0x6e, 0x2d, 0xde, 0xfc, 0x0c, 0x79, 0xc0, 0xd8, 0xf4, 0xf2, 0x39, 0x18,
	0x60, 0xb4, 0x4a, 0xc8, 0x03, 0xc6, 0x2d, 0xfd, 0x79, 0xc3, 0xb8, 0xf5, 0x8a, 0x52, 0xfe, 0xe7,
	0x1d, 0x8f, 0x64, 0xe6, 0xf3, 0x86, 0x29, 0xed, 0x0a, 0x6a, 0xc8, 0xf0, 0xda, 0x94, 0xf6, 0x4a,
	0xe0, 0xb8, 0x2b, 0x0f, 0x87, 0x1c, 0xcb, 0x80, 0xa7, 0x36, 0x4c, 0x98, 0xbd, 0x03, 0xb4, 0xa6,
	0xf5, 0x12, 0x6d, 0x5a, 0x7b, 0x15, 0xb0, 0x3d, 0x23, 0x5f, 0x47, 0x91, 0x73, 0x1a, 0xf0, 0x79,
	0xc3, 0xd4, 0x0f, 0xde, 0x11, 0x5a, 0x4f, 0x64, 0x27, 0x26, 0xaa, 0x57, 0x03, 0xe5, 0xdd, 0xb9,
	0x13, 0xe4, 0x36, 0xe0, 0x6c, 0x0c, 0xd3, 0xbf, 0x78, 0xd7, 0x11, 0x4e, 0xa5, 0x29, 0x68, 0x5f,
	0x03, 0xb4, 0x67, 0xe6, 0xc8, 0xd4, 0x20, 0x5e, 0x1b, 0xda, 0x7e, 0x13, 0x9b, 0x25, 0x3e, 0x19,
	0xe0, 0x30, 0x7e, 0x6d, 0xce, 0xcd, 0x12, 0x1f, 0x8c, 0xea, 0x34, 0x66, 0x9b, 0x45, 0x9a, 0xc4,
	0x6e, 0x3f, 0xd2, 0xe2, 0xbf, 0x2e, 0xe7, 0x6e, 0x87, 0x73, 0x51, 0x11, 0xb0, 0xdd, 0xae, 0x6c,
	0x82, 0x61, 0xa2, 0x31, 0xbc, 0x3e, 0x27, 0xc3, 0xae, 0x85, 0x41, 0xd9, 0xb4, 0x12, 0x51, 0x02,
	0x04, 0x6f, 0xc8, 0x5f, 0x22, 0x4a, 0x52, 0x25, 0x02, 0x93, 0x5e, 0x22, 0x11, 0xff, 0x8d, 0x73,
	0x94, 0x48, 0x27, 0x10, 0x25, 0x32, 0x19, 0x26, 0x1a, 0xc3, 0x9b, 0xe6, 0x28, 0x51, 0x92, 0x41,
	0xd9, 0xc4, 0x19, 0xc0, 0x4f, 0x1c, 0xa0, 0x78, 0x73, 0x29, 0xdf, 0x19, 0xc0, 0x8f, 0x45, 0xc5,
	0xc1, 0xaa, 0xae, 0x19, 0x65, 0xa1, 0xe2, 0x2e, 0x07, 0x1c, 0x6f, 0xc9, 0x5b, 0xa8, 0xd8, 0x37,
	0x51, 0x28, 0x69, 0xf3, 0x7c, 0x84, 0xa2, 0x51, 0x27, 0xea, 0x42, 0xf0, 0xc7, 0x4a, 0xbe, 0x13,
	0x2c, 0xb7, 0x0a, 0xe1, 0x4a, 0x6c, 0x8c, 0x11, 0xa7, 0xd0, 0x0d, 0x80, 0x80, 0x9b, 0xd9, 0xe3,
	0x0c, 0xb2, 0xd0, 0x2a, 0x84, 0xe0, 0x07, 0x77, 0xc4, 0x9b, 0x50, 0x19, 0x30, 0xfc, 0x82, 0xf8,
	0x04, 0x03, 0xd5, 0x5b, 0x85, 0x10, 0x5c, 0xf9, 0x3d, 0x4f, 0xa2, 0xf8, 0x25, 0xef, 0xfb, 0x0c,
	0x55, 0x91, 0x28, 0x7e, 0x57, 0xd3, 0xf9, 0x28, 0xc1, 0x3f, 0x60, 0x20, 0x57, 0xe7, 0xa3, 0xc4,
	0xe4, 0xa3, 0x04, 0xff, 0x90, 0x81, 0x3c, 0x83, 0x4f, 0x47, 0xf1, 0x1b, 0xd3, 0x8f, 0x18, 0xaa,
	0x64, 0xf0, 0x51, 0xe2, 0xdd, 0x8c, 0x2a, 0x80, 0x12, 0xf7, 0x91, 0x1f, 0x33, 0xd8, 0x52, 0xab,
	0x10, 0x82, 0xb7, 0xb8, 0xbb, 0x04, 0x68, 0x95, 0x73, 0x0a, 0xe0, 0x4f, 0x18, 0xb0, 0xda, 0x2a,
	0x84, 0x10, 0x40, 0xde, 0x3e, 0x64, 0x06, 0x70, 0xf5, 0xf8, 0x29, 0x83, 0x15, 0x65, 0x06, 0x70,
	0x85, 0x30, 0x59, 0x29, 0xc1, 0x3f, 0x63, 0xa8, 0x45, 0x93, 0x35, 0xfe, 0xe3, 0xa4, 0xc1, 0x4a,
	0x09, 0xfe, 0x39, 0x03, 0xd6, 0x12, 0xac, 0x7a, 0xb6, 0xfc, 0x10, 0xff, 0x05, 0xc3, 0x39, 0x32,
	0x5b, 0x7e, 0x16, 0xab, 0xca, 0xc1, 0x41, 0xfc, 0x4b, 0x86, 0x5a, 0x51, 0x95, 0x83, 0xf3, 0x54,
	0x66, 0x00, 0x87, 0xe9, 0xaf, 0x18, 0xa8, 0x2c, 0x33, 0x80, 0x43, 0xf1, 0x85, 0xa8, 0x06, 0x18,
	0xed, 0x44, 0xfc, 0x75, 0x69, 0xce, 0x57, 0x18, 0xad, 0x42, 0x08, 0x79, 0xaa, 0x83, 0xf0, 0xf9,
	0xc8, 0x13, 0xcf, 0x58, 0x3b, 0x05, 0x7f, 0x53, 0xca, 0xf7, 0xfe, 0xa2, 0x55, 0x08, 0x6b, 0x7c,
	0x4f, 0xa8, 0x13, 0xaf, 0x87, 0x1a, 0xfa, 0xd2, 0xc5, 0xb9, 0xf3, 0xdb, 0xd2, 0xfc, 0x2f, 0x2f,
	0x5a, 0x85, 0xb0, 0xae, 0x12, 0x10, 0x47, 0xcd, 0x1e, 0x5a, 0x33, 0x73, 0x10, 0x54, 0xbf, 0x2b,
	0xe5, 0x7e, 0x73, 0xd1, 0x2a, 0x84, 0x0d, 0x3d, 0x13, 0xc1, 0x21, 0x77, 0x12, 0x3c, 0xd1, 0x2d,
	0xfc, 0x7b, 0xf1, 0x48, 0xcb, 0xda, 0x23, 0xdd, 0x4a, 0xe2, 0xb6, 0xf1, 0x1f, 0x6c, 0xb8, 0xed,
	0x24, 0xae, 0x89, 0xff, 0x68, 0xc3, 0x35, 0x37, 0xb6, 0x50, 0x35, 0x51, 0x83, 0x69, 0x6f, 0x5b,
	0x37, 0xee, 0x41, 0xb5, 0xe4, 0x28, 0xeb, 0xd5, 0x90, 0x7b, 0xb5, 0x73, 0x3d, 0x76, 0x5a, 0x0e,
	0xd9, 0x47, 0xef, 0x04, 0x5a, 0xb8, 0xd6, 0x1e, 0x4c, 0x3a, 0xb8, 0x18, 0xdb, 0xe0, 0xcb, 0x5d,
	0xc5, 0x3b, 0x9c, 0x8d, 0x33, 0xa8, 0x9e, 0x9a, 0x56, 0xa7, 0x05, 0x58, 0xd0, 0x03, 0x3c, 0x13,
	0x79, 0xe9, 0x71, 0x74, 0x5a, 0x84, 0xba, 0x3d, 0xc2, 0xee, 0xec, 0x11, 0x2a, 0x99, 0x49, 0xf0,
	0x5b, 0xf9, 0xb4, 0x00, 0x6e, 0x76, 0x12, 0x33, 0x46, 0xf0, 0xb2, 0x93, 0x98, 0x31, 0x42, 0x49,
	0x8f, 0x70, 0x16, 0x35, 0x2c, 0xf3, 0xde, 0xb4, 0x10, 0x4b, 0x7a, 0x88, 0x1d, 0x74, 0xc2, 0x36,
	0xcc, 0x4d, 0x8b, 0x51, 0xb5, 0xd7, 0x52, 0xcd, 0x6a, 0xd3, 0x02, 0x14, 0x8f, 0xc9, 0x63, 0xc6,
	0x52, 0x2c, 0x1e, 0x97, 0xc7, 0x8c, 0x31, 0x6a, 0xf6, 0x07, 0xa2, 0x8d, 0x51, 0xd3, 0x22, 0x38,
	0x19, 0x9b, 0x42, 0x8d, 0x49, 0xd3, 0x22, 0xac, 0xd8, 0x6b, 0xa9, 0xe6, 0xa0, 0x69, 0x01, 0xca,
	0x7a, 0x80, 0x6b, 0x68, 0xcd, 0x3a, 0xe4, 0x58, 0x82, 0x3c, 0x5b, 0x0f, 0x32, 0xd7, 0x7b, 0x2e,
	0x8d, 0x37, 0x42, 0x27, 0x33, 0xc6, 0x1d, 0x0b, 0xf3, 0x3d, 0x26, 0xf3, 0xec, 0xef, 0xbe, 0x34,
	0xc2, 0x97, 0x22, 0x9c, 0x35, 0xec, 0x58, 0x18, 0xef, 0xd7, 0x19, 0xe7, 0x7d, 0x1b, 0xa6, 0xb1,
	0x4f, 0xd0, 0x46, 0xf6, 0xcc, 0x63, 0xe1, 0x3f, 0x6b, 0xf2, 0xe7, 0x7a, 0x3d, 0x96, 0xda, 0x1e,
	0xe6, 0xe4, 0xa3, 0xb3, 0x2d, 0x4c, 0x6b, 0xde, 0xb0, 0x43, 0x13, 0xa3, 0x8d, 0x1e, 0xa1, 0x3e,
	0x5b, 0x84, 0xdd, 0xec, 0x08, 0x95, 0xd9, 0x0e, 0x10, 0x73, 0x36, 0xd1, 0x03, 0xb8, 0xb3, 0x27,
	0x91, 0x11, 0xc1, 0x9b, 0x3d, 0x89, 0x8c, 0x08, 0xa5, 0x69, 0x11, 0xa0, 0x67, 0x25, 0x67, 0x07,
	0x3d, 0xc4, 0xd2, 0x8c, 0x69, 0x98, 0xa3, 0x81, 0x1e, 0x61, 0x65, 0x4a, 0x84, 0x53, 0xa7, 0x51,
	0x59, 0xd7, 0xa3, 0xb7, 0x8c, 0x4a, 0x0f, 0x9f, 0x0b, 0xcf, 0xd7, 0x0a, 0xde, 0x12, 0x72, 0xcf,
	0x3f, 0x74, 0xae, 0xe6, 0xb0, 0x0f, 0xcf, 0x7d, 0xde, 0xf9, 0x5a, 0x71, 0xa7, 0x22, 0x6e, 0x93,
	0x93, 0x51, 0x3f, 0x1a, 0x9d, 0xbe, 0x15, 0xad, 0x9a, 0xda, 0x3a, 0xce, 0x79, 0x6f, 0x11, 0x36,
	0xe7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x09, 0x11, 0x7d, 0x5b, 0x0c, 0x26, 0x00, 0x00,
}
